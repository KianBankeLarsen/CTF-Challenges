replicaCount: 1

image:
  repository: registry.gitlab.com/ctf9215737/ctf/deployer
  pullPolicy: Always
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

podAnnotations: {}
podLabels:
  app: deployer

podSecurityContext: {}

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  runAsNonRoot: true
  runAsUser: 1001

service:
  type: ClusterIP
  port: 8080

volumes:
- name: deployer-pv-storage
  persistentVolumeClaim:
    claimName: deployer-pvclaim

volumeMounts:
- name: deployer-pv-storage
  mountPath: "/uploads"
  readOnly: false

livenessProbe:
  httpGet:
    path: /health
    port: 8080
readinessProbe:
  httpGet:
    path: /health
    port: 8080

challenges:
  httpIngress:
    annotations:
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      cert-manager.io/issuer: "step-issuer"
      cert-manager.io/issuer-kind: "StepClusterIssuer"
      cert-manager.io/issuer-group: "certmanager.step.sm"

ingress:
  create: true
  host: deployer.local.lan
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/issuer: "step-issuer"
    cert-manager.io/issuer-kind: "StepClusterIssuer"
    cert-manager.io/issuer-group: "certmanager.step.sm"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
  useTls: true
  tlsSecretName: "deployer-inbound-tls"

env:
  DBHOST: "deployer-postgresql"
  DBPORT: 5432
  DBUSER: "postgres"
  ROOTCERT: ""
  DBNAME: "postgres"
  # Directory of mounted storage where challenges are uploaded
  UPLOADPATH: "/uploads"
  # Min and max allowed memory used by VM
  MINVMMEMORY: "256M"
  MAXVMMEMORY: "2048M"
  VMCPUS: 2
  # Minutes before challenge instances are automatically deleted
  CHALLENGELIFETIMEMINUTES: 120
  TESTLIFETIMEMINUTES: 120
  # URL where VM's can download challenge files from the deployer service
  BACKENDURL: "http://deployer.ctf.svc.cluster.local:8080"
  # The domain of which subdomains are generated, example: 7651121c-b8d2-43e9-af88-c493d8ad8a75.local.lan
  CHALLENGEDOMAIN: ".local.lan"
  VMIMAGEURL: "registry.gitlab.com/ctf9215737/ctf/alpinevm"
  CONTAINERIMAGEURL: "localregistry:443/debian-container:latest"
  # URL where the deployer service can access CTFd
  CTFDURL: "http://ctfd"
  CTFDAPITOKEN: "ctfd_..."
  GIN_MODE: "release"
  JWKSURL: "http://localhost:8080/realms/ctf/protocol/openid-connect/certs"
  VMSSHPUBLICKEY: ""
  IMAGEPULLSECRET: ""
  CHALLENGEREADINESSPROBE_INITIALDELAYSECONDS: 30
  CHALLENGEREADINESSPROBE_PERIODSECONDS: 30
  CHALLENGEREADINESSPROBE_TIMEOUTSECONDS: 5
  CHALLENGEREADINESSPROBE_FAILURETHRESHOLD: 30
  CHALLENGELIVENESSPROBE_INITIALDELAYSECONDS: 900
  CHALLENGELIVENESSPROBE_PERIODSECONDS: 30
  CHALLENGELIVENESSPROBE_TIMEOUTSECONDS: 10
  CHALLENGELIVENESSPROBE_FAILURETHRESHOLD: 5
  ALLOWEDCHALLENGESATONCE: 1
  #https://github.com/kubevirt/kubevirt/issues/13734
  CHALLENGESTARTUPPROBE_INITIALDELAYSECONDS: 15
  CHALLENGESTARTUPPROBE_PERIODSECONDS: 30
  CHALLENGESTARTUPPROBE_TIMEOUTSECONDS: 5
  CHALLENGESTARTUPPROBE_FAILURETHRESHOLD: 30
  UNLEASH_URL: http://deployer-unleash:4242/unleash/api/
  UNLEASH_APIKEY: default:production.unleash-insecure-api-token
  UNLEASH_ENVIRONMENT: production

# PostgreSQL subchart: Use own secret to avoid replacing the Postgres secret on upgrade
postgresql:
  enabled: true
  auth:
    existingSecret: deployer-postgresql
    secretKeys:
      adminPasswordKey: postgres-password

reflector:
  enabled: true

unleash:
  enabled: true